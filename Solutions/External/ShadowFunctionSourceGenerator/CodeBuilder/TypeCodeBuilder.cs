using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;

namespace ShadowFunction;

public class TypeCodeBuilder {
    private const string DefaultPreface = """
                                          //------------------------------------------------------------------------------
                                          // <auto-generated>
                                          //     This code was generated by source generator.
                                          // </auto-generated>
                                          //------------------------------------------------------------------------------
                                          """;

    public string Preface {
        get => this._preface;
        set {
            this._isChanged = true;
            this._preface = value;
        }
    }

    private List<string>? _usings;

    public string? Namespace {
        get => this._ns;
        set {
            this._isChanged = true;
            this._ns = value;
        }
    }

    private List<string>? _attributes;

    public Accessibility DeclaredAccessibility {
        get => this._declaredAccessibility;
        set {
            this._isChanged = true;
            this._declaredAccessibility = value;
        }
    }

    public bool IsStatic {
        get => this._isStatic;
        set {
            this._isChanged = true;
            this._isStatic = value;
        }
    }

    public bool IsPartial {
        get => this._isPartial;
        set {
            this._isChanged = true;
            this._isPartial = value;
        }
    }

    public TypeKind TypeKind {
        get => this._typeKind;
        set {
            this._isChanged = true;
            this._typeKind = value;
        }
    }

    public string? Name {
        get => this._name;
        set {
            this._isChanged = true;
            this._name = value;
        }
    }

    private List<string>? _fields;

    private List<MethodCodeBuilder>? _methodCodeBuilders;

    private string? _codeTemplate;

    private string _preface = DefaultPreface;
    private string? _ns;
    private Accessibility _declaredAccessibility;
    private bool _isStatic;
    private bool _isPartial = false;
    private TypeKind _typeKind;
    private string? _name;

    private bool _isChanged = true;
    private readonly StringBuilder _stringBuilder = new();

    public void AppendUsing(string value) {
        this._isChanged = true;
        this._usings ??= new();
        this._usings.Add(value);
    }

    public void AppendAttribute(string value) {
        this._isChanged = true;
        this._attributes ??= new();
        this._attributes.Add(value);
    }

    public void AppendField(string value) {
        this._isChanged = true;
        this._fields ??= new();
        this._fields.Add(value);
    }

    public void AppendMethodBuilder(MethodCodeBuilder value) {
        this._isChanged = true;
        value.Generate();
        this._methodCodeBuilders ??= new();
        this._methodCodeBuilders.Add(value);
    }

    public void Generate() {
        // using...
        string? usingContent = null;
        if (this._usings != null) {
            this._stringBuilder.Clear();
            foreach (var str in this._usings) {
                this._stringBuilder.Append(str);
                this._stringBuilder.Append("\n");
            }
        }

        usingContent = this._stringBuilder.ToString();
        
        // 命名空间的占位符
        string methodPlaceholder = string.IsNullOrEmpty(this.Namespace) ? "\t" : "\t\t";
        
        // 字段
        string? attributeContent = null;
        if (this._attributes != null) {
            this._stringBuilder.Clear();
            foreach (var str in this._attributes) {
                this._stringBuilder.Append(str);
                this._stringBuilder.Append("\n");
            }
            
            attributeContent = this._stringBuilder.ToString();
            string[] lines = attributeContent.Split('\n');
            this._stringBuilder.Clear();
            for (int i = 0, len = lines.Length; i < len; i++) {
                this._stringBuilder.Append(methodPlaceholder).Append(lines[i]);
                if (i < len - 1) {
                    this._stringBuilder.Append("\n");
                }
            }

            attributeContent = this._stringBuilder.ToString();
        }

        // 可访问性
        string? declaredAccessibilityContent = CodeBuilderHelper.DeclaredAccessibility2String(this.DeclaredAccessibility);

        // 是否静态
        string? staticContent = this.IsStatic ? " static" : null;

        // 修饰符
        string? partialContent = this.IsPartial ? " partial" : null;

        // 种类
        string? typeKindContent = this.TypeKind switch {
            TypeKind.Class => " class",
            TypeKind.Struct => " struct",
            _ => null
        };
        Common.AssertNullReference(typeKindContent);

        // 名字
        string? name = this.Name;
        Common.AssertNullReference(name);

        // 字段
        string? fieldContent = null;
        if (this._fields != null) {
            this._stringBuilder.Clear();
            foreach (var str in this._fields) {
                this._stringBuilder.Append(str);
                this._stringBuilder.Append("\n");
            }
            
            fieldContent = this._stringBuilder.ToString();
            string[] lines = fieldContent.Split('\n');
            this._stringBuilder.Clear();
            for (int i = 0, len = lines.Length; i < len; i++) {
                this._stringBuilder.Append(methodPlaceholder).Append(lines[i]);
                if (i < len - 1) {
                    this._stringBuilder.Append("\n");
                }
            }

            fieldContent = this._stringBuilder.ToString();
        }
        
        // 函数
        string? methodsContent = null;
        if (this._methodCodeBuilders != null) {
            this._stringBuilder.Clear();
            for (int i = 0, len = this._methodCodeBuilders.Count; i < len; i++) {
                var methodCodeBuilder = this._methodCodeBuilders[i];
                this._stringBuilder.Append(methodCodeBuilder);
                if (i < len - 1) {
                    this._stringBuilder.Append("\n");
                    this._stringBuilder.Append("\n");
                }
            }

            methodsContent = this._stringBuilder.ToString();
            string[] lines = methodsContent.Split('\n');
            this._stringBuilder.Clear();
            for (int i = 0, len = lines.Length; i < len; i++) {
                this._stringBuilder.Append(methodPlaceholder).Append(lines[i]);
                if (i < len - 1) {
                    this._stringBuilder.Append("\n");
                }
            }

            methodsContent = this._stringBuilder.ToString();
        }

        // 模板
        if (string.IsNullOrEmpty(this.Namespace)) {
            this._codeTemplate = $$"""
                                   {{this.Preface}}
                                   {{usingContent}}
                                   {{attributeContent}}
                                   {{declaredAccessibilityContent}}{{staticContent}}{{partialContent}}{{typeKindContent}} {{name}} {
                                   {{fieldContent}}
                                   {{methodsContent}}
                                   }
                                   """;
        }
        else {
            this._codeTemplate = $$"""
                                   {{this.Preface}}
                                   {{usingContent}}
                                   namespace {{this.Namespace}} {
                                   {{attributeContent}}
                                       {{declaredAccessibilityContent}}{{staticContent}}{{partialContent}}{{typeKindContent}} {{name}} {
                                   {{fieldContent}}
                                   {{methodsContent}}
                                       }
                                   }
                                   """;
        }
    }

    public void Clear() {
        this._preface = DefaultPreface;
        this._usings?.Clear();
        this._usings = null;
        this._attributes?.Clear();
        this._attributes = null;
        this._ns = null;
        this._declaredAccessibility = default;
        this._isStatic = false;
        this._isPartial = false;
        this._typeKind = default;
        this._name = null;
        this._fields?.Clear();
        this._fields = null;
        this._methodCodeBuilders?.Clear();
        this._methodCodeBuilders = null;
        this._codeTemplate = null;
        this._isChanged = true;
        this._stringBuilder.Clear();
    }

    public override string? ToString() {
        if (this._isChanged) {
            this.Generate();
            this._isChanged = false;
        }

        return this._codeTemplate;
    }
}

public class MethodCodeBuilder {
    public Accessibility DeclaredAccessibility {
        get => this._declaredAccessibility;
        set {
            this._isChanged = true;
            this._declaredAccessibility = value;
        }
    }

    public bool IsStatic {
        get => this._isStatic;
        set {
            this._isChanged = true;
            this._isStatic = value;
        }
    }

    public bool IsAbstract {
        get => this._isAbstract;
        set {
            this._isChanged = true;
            this._isAbstract = value;
        }
    }

    public bool IsVirtual {
        get => this._isVirtual;
        set {
            this._isChanged = true;
            this._isVirtual = value;
        }
    }

    public bool IsOverride {
        get => this._isOverride;
        set {
            this._isChanged = true;
            this._isOverride = value;
        }
    }

    public bool IsAsync {
        get => this._isAsync;
        set {
            this._isChanged = true;
            this._isAsync = value;
        }
    }

    public string? Return {
        get => this._return;
        set {
            this._isChanged = true;
            this._return = value;
        }
    }

    public string? Name {
        get => this._name;
        set {
            this._isChanged = true;
            this._name = value;
        }
    }

    private List<string>? _params;

    public string? Body {
        get => this._body;
        set {
            this._isChanged = true;
            this._body = value;
        }
    }

    public int ParamLength => this._params?.Count ?? 0;

    private string? _codeTemplate;

    private Accessibility _declaredAccessibility;
    private bool _isStatic;
    private bool _isAbstract;
    private bool _isVirtual;
    private bool _isOverride;
    private bool _isAsync;
    private string? _return;
    private string? _name;
    private string? _body;

    private bool _isChanged = true;
    private readonly StringBuilder _stringBuilder = new();

    public void AppendParam(string value) {
        this._isChanged = true;
        this._params ??= new();
        this._params.Add(value);
    }

    public void Generate() {
        // 可访问性
        string? declaredAccessibilityContent = CodeBuilderHelper.DeclaredAccessibility2String(this.DeclaredAccessibility);
        string? modifierContent = null;
        if (this.IsStatic) modifierContent = " static";
        else if (this.IsAbstract) modifierContent = " abstract";
        else if (this.IsVirtual) modifierContent = " virtual";
        else if (this.IsOverride) modifierContent = " override";
        string? asyncContent = this.IsAsync ? " async" : null;
        string? returnContent = this.Return;
        string? methodNameContent = this.Name;
        string? paramContent = null;
        if (this._params != null) {
            this._stringBuilder.Clear();
            for (int i = 0, len = this._params.Count; i < len; i++) {
                var param = this._params[i];
                this._stringBuilder.Append(param);
                if (i < len - 1) this._stringBuilder.Append(", ");
            }

            paramContent = this._stringBuilder.ToString();
        }

        if (this.IsAbstract) {
            this._codeTemplate = $"""
                                  {declaredAccessibilityContent}{modifierContent}{asyncContent} {returnContent} {methodNameContent}({paramContent});
                                  """;
        }
        else {
            string? body = this.Body;
            this._codeTemplate = $$"""
                                   {{declaredAccessibilityContent}}{{modifierContent}}{{asyncContent}} {{returnContent}} {{methodNameContent}}({{paramContent}}) {
                                   {{body}}
                                   }
                                   """;
        }
    }

    public void Clear() {
        this._declaredAccessibility = default;
        this._isStatic = false;
        this._isAbstract = false;
        this._isVirtual = false;
        this._isOverride = false;
        this._isAsync = false;
        this._return = null;
        this._name = null;
        this._params?.Clear();
        this._params = null;
        this._body = null;
        this._codeTemplate = null;
        this._isChanged = true;
        this._stringBuilder.Clear();
    }

    public override string? ToString() {
        if (this._isChanged) {
            this.Generate();
            this._isChanged = false;
        }

        return this._codeTemplate;
    }
}

public static class CodeBuilderHelper {
    public static string? DeclaredAccessibility2String(Accessibility accessibility) {
        return accessibility switch {
            Accessibility.Public => "public",
            Accessibility.Protected => "protected",
            Accessibility.Private => "private",
            Accessibility.Internal => "internal",
            Accessibility.ProtectedAndInternal => "protected internal",
            _ => null
        };
    }
}