//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace Hsenl.procedureline
{ 

/// <summary>
/// 流水线相关信息基类
/// </summary>
public abstract partial class Info :  Bright.Config.BeanBase 
{
    public Info(JSONNode _json) 
    {
        PostInit();
    }

    public Info() 
    {
        PostInit();
    }

    public static Info DeserializeInfo(JSONNode _json)
    {
        string type = _json["$type"];
        switch (type)
        {
            case "Null": return new procedureline.Null(_json);
            case "WorkerNull": return new procedureline.WorkerNull(_json);
            case "CastWorkerNull": return new procedureline.CastWorkerNull(_json);
            case "HarmProbabilisticCastInfo": return new procedureline.HarmProbabilisticCastInfo(_json);
            case "HealthRatioCastInfo": return new procedureline.HealthRatioCastInfo(_json);
            case "ProbAdditionalStatusOnHarmInfo": return new procedureline.ProbAdditionalStatusOnHarmInfo(_json);
            case "ProbAdditionalStatusOnHarmInfo2": return new procedureline.ProbAdditionalStatusOnHarmInfo2(_json);
            case "ProbabilisticRepetitionCastInfo": return new procedureline.ProbabilisticRepetitionCastInfo(_json);
            case "MissBeSelectOnHarmInfo": return new procedureline.MissBeSelectOnHarmInfo(_json);
            case "SplitBoltOnHitInfo": return new procedureline.SplitBoltOnHitInfo(_json);
            case "AddStageDurationInfo": return new procedureline.AddStageDurationInfo(_json);
            default: throw new SerializationException();
        }
    }



    public virtual void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public virtual void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
