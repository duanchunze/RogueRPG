//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace Hsenl.ability
{ 

public sealed partial class AbilityPatchConfig :  Bright.Config.BeanBase 
{
    public AbilityPatchConfig(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["alias"].IsString) { throw new SerializationException(); }  Alias = _json["alias"]; }
        { if(!_json["target_ability"].IsString) { throw new SerializationException(); }  TargetAbility = _json["target_ability"]; }
        { var __json0 = _json["precondition_patchs"]; if(!__json0.IsArray) { throw new SerializationException(); } PreconditionPatchs = new System.Collections.Generic.List<string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  PreconditionPatchs.Add(__v0); }   }
        { var __json0 = _json["repulsion_patchs"]; if(!__json0.IsArray) { throw new SerializationException(); } RepulsionPatchs = new System.Collections.Generic.List<string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  RepulsionPatchs.Add(__v0); }   }
        { if(!_json["max_count"].IsNumber) { throw new SerializationException(); }  MaxCount = _json["max_count"]; }
        { if(!_json["lowest_lv"].IsNumber) { throw new SerializationException(); }  LowestLv = _json["lowest_lv"]; }
        { var __json0 = _json["numeric_nodes"]; if(!__json0.IsArray) { throw new SerializationException(); } NumericNodes = new System.Collections.Generic.List<numeric.AttachValueInfo>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { numeric.AttachValueInfo __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = numeric.AttachValueInfo.DeserializeAttachValueInfo(__e0);  }  NumericNodes.Add(__v0); }   }
        { var __json0 = _json["workers"]; if(!__json0.IsArray) { throw new SerializationException(); } Workers = new System.Collections.Generic.List<procedureline.WorkerInfo>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { procedureline.WorkerInfo __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = procedureline.WorkerInfo.DeserializeWorkerInfo(__e0);  }  Workers.Add(__v0); }   }
        PostInit();
    }

    public AbilityPatchConfig(int id, string alias, string target_ability, System.Collections.Generic.List<string> precondition_patchs, System.Collections.Generic.List<string> repulsion_patchs, int max_count, int lowest_lv, System.Collections.Generic.List<numeric.AttachValueInfo> numeric_nodes, System.Collections.Generic.List<procedureline.WorkerInfo> workers ) 
    {
        this.Id = id;
        this.Alias = alias;
        this.TargetAbility = target_ability;
        this.PreconditionPatchs = precondition_patchs;
        this.RepulsionPatchs = repulsion_patchs;
        this.MaxCount = max_count;
        this.LowestLv = lowest_lv;
        this.NumericNodes = numeric_nodes;
        this.Workers = workers;
        PostInit();
    }

    public static AbilityPatchConfig DeserializeAbilityPatchConfig(JSONNode _json)
    {
        return new ability.AbilityPatchConfig(_json);
    }

    /// <summary>
    /// 这是ID
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 别名
    /// </summary>
    public string Alias { get; private set; }
    /// <summary>
    /// 目标技能别名
    /// </summary>
    public string TargetAbility { get; private set; }
    /// <summary>
    /// 前置条件补丁
    /// </summary>
    public System.Collections.Generic.List<string> PreconditionPatchs { get; private set; }
    /// <summary>
    /// 排斥补丁
    /// </summary>
    public System.Collections.Generic.List<string> RepulsionPatchs { get; private set; }
    /// <summary>
    /// 该补丁最多拥有多少个
    /// </summary>
    public int MaxCount { get; private set; }
    /// <summary>
    /// 最低多少级才会出现, -1代表不限制
    /// </summary>
    public int LowestLv { get; private set; }
    /// <summary>
    /// 附加的数值
    /// </summary>
    public System.Collections.Generic.List<numeric.AttachValueInfo> NumericNodes { get; private set; }
    public System.Collections.Generic.List<procedureline.WorkerInfo> Workers { get; private set; }

    public const int __ID__ = 1140707716;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in NumericNodes) { _e?.Resolve(_tables); }
        foreach(var _e in Workers) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in NumericNodes) { _e?.TranslateText(translator); }
        foreach(var _e in Workers) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Alias:" + Alias + ","
        + "TargetAbility:" + TargetAbility + ","
        + "PreconditionPatchs:" + Bright.Common.StringUtil.CollectionToString(PreconditionPatchs) + ","
        + "RepulsionPatchs:" + Bright.Common.StringUtil.CollectionToString(RepulsionPatchs) + ","
        + "MaxCount:" + MaxCount + ","
        + "LowestLv:" + LowestLv + ","
        + "NumericNodes:" + Bright.Common.StringUtil.CollectionToString(NumericNodes) + ","
        + "Workers:" + Bright.Common.StringUtil.CollectionToString(Workers) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
