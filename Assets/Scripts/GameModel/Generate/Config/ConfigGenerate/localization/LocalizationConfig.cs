//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace Hsenl.localization
{ 

public sealed partial class LocalizationConfig :  Bright.Config.BeanBase 
{
    public LocalizationConfig(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["alias"].IsString) { throw new SerializationException(); }  Alias = _json["alias"]; }
        { var __json0 = _json["map"]; if(!__json0.IsArray) { throw new SerializationException(); } Map = new System.Collections.Generic.Dictionary<LocalizationKey, string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { LocalizationKey _k0;  { if(!__e0[0].IsNumber) { throw new SerializationException(); }  _k0 = (LocalizationKey)__e0[0].AsInt; } string _v0;  { if(!__e0[1].IsString) { throw new SerializationException(); }  _v0 = __e0[1]; }  Map.Add(_k0, _v0); }   }
        { var __json0 = _json["tag_type_map"]; if(!__json0.IsArray) { throw new SerializationException(); } TagTypeMap = new System.Collections.Generic.Dictionary<TagType, string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { TagType _k0;  { if(!__e0[0].IsNumber) { throw new SerializationException(); }  _k0 = (TagType)__e0[0].AsInt; } string _v0;  { if(!__e0[1].IsString) { throw new SerializationException(); }  _v0 = __e0[1]; }  TagTypeMap.Add(_k0, _v0); }   }
        { var __json0 = _json["damage_type_map"]; if(!__json0.IsArray) { throw new SerializationException(); } DamageTypeMap = new System.Collections.Generic.Dictionary<DamageType, string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { DamageType _k0;  { if(!__e0[0].IsNumber) { throw new SerializationException(); }  _k0 = (DamageType)__e0[0].AsInt; } string _v0;  { if(!__e0[1].IsString) { throw new SerializationException(); }  _v0 = __e0[1]; }  DamageTypeMap.Add(_k0, _v0); }   }
        { var __json0 = _json["beans_behavior_map"]; if(!__json0.IsArray) { throw new SerializationException(); } BeansBehaviorMap = new System.Collections.Generic.Dictionary<string, string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string _k0;  { if(!__e0[0].IsString) { throw new SerializationException(); }  _k0 = __e0[0]; } string _v0;  { if(!__e0[1].IsString) { throw new SerializationException(); }  _v0 = __e0[1]; }  BeansBehaviorMap.Add(_k0, _v0); }   }
        { var __json0 = _json["beans_procedureline_map"]; if(!__json0.IsArray) { throw new SerializationException(); } BeansProcedurelineMap = new System.Collections.Generic.Dictionary<string, string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string _k0;  { if(!__e0[0].IsString) { throw new SerializationException(); }  _k0 = __e0[0]; } string _v0;  { if(!__e0[1].IsString) { throw new SerializationException(); }  _v0 = __e0[1]; }  BeansProcedurelineMap.Add(_k0, _v0); }   }
        { var __json0 = _json["numeric_type_map"]; if(!__json0.IsArray) { throw new SerializationException(); } NumericTypeMap = new System.Collections.Generic.Dictionary<NumericType, string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { NumericType _k0;  { if(!__e0[0].IsNumber) { throw new SerializationException(); }  _k0 = (NumericType)__e0[0].AsInt; } string _v0;  { if(!__e0[1].IsString) { throw new SerializationException(); }  _v0 = __e0[1]; }  NumericTypeMap.Add(_k0, _v0); }   }
        PostInit();
    }

    public LocalizationConfig(int id, string alias, System.Collections.Generic.Dictionary<LocalizationKey, string> map, System.Collections.Generic.Dictionary<TagType, string> tag_type_map, System.Collections.Generic.Dictionary<DamageType, string> damage_type_map, System.Collections.Generic.Dictionary<string, string> beans_behavior_map, System.Collections.Generic.Dictionary<string, string> beans_procedureline_map, System.Collections.Generic.Dictionary<NumericType, string> numeric_type_map ) 
    {
        this.Id = id;
        this.Alias = alias;
        this.Map = map;
        this.TagTypeMap = tag_type_map;
        this.DamageTypeMap = damage_type_map;
        this.BeansBehaviorMap = beans_behavior_map;
        this.BeansProcedurelineMap = beans_procedureline_map;
        this.NumericTypeMap = numeric_type_map;
        PostInit();
    }

    public static LocalizationConfig DeserializeLocalizationConfig(JSONNode _json)
    {
        return new localization.LocalizationConfig(_json);
    }

    public int Id { get; private set; }
    public string Alias { get; private set; }
    public System.Collections.Generic.Dictionary<LocalizationKey, string> Map { get; private set; }
    public System.Collections.Generic.Dictionary<TagType, string> TagTypeMap { get; private set; }
    public System.Collections.Generic.Dictionary<DamageType, string> DamageTypeMap { get; private set; }
    public System.Collections.Generic.Dictionary<string, string> BeansBehaviorMap { get; private set; }
    public System.Collections.Generic.Dictionary<string, string> BeansProcedurelineMap { get; private set; }
    public System.Collections.Generic.Dictionary<NumericType, string> NumericTypeMap { get; private set; }

    public const int __ID__ = 244974800;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Alias:" + Alias + ","
        + "Map:" + Bright.Common.StringUtil.CollectionToString(Map) + ","
        + "TagTypeMap:" + Bright.Common.StringUtil.CollectionToString(TagTypeMap) + ","
        + "DamageTypeMap:" + Bright.Common.StringUtil.CollectionToString(DamageTypeMap) + ","
        + "BeansBehaviorMap:" + Bright.Common.StringUtil.CollectionToString(BeansBehaviorMap) + ","
        + "BeansProcedurelineMap:" + Bright.Common.StringUtil.CollectionToString(BeansProcedurelineMap) + ","
        + "NumericTypeMap:" + Bright.Common.StringUtil.CollectionToString(NumericTypeMap) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
