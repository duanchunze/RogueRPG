//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace Hsenl.drops
{ 

public sealed partial class DropByProbability :  drops.Info 
{
    public DropByProbability(JSONNode _json)  : base(_json) 
    {
        { if(!_json["pickable_id"].IsNumber) { throw new SerializationException(); }  PickableId = _json["pickable_id"]; }
        { if(!_json["probability"].IsNumber) { throw new SerializationException(); }  Probability = _json["probability"]; }
        { if(!_json["count_each"].IsNumber) { throw new SerializationException(); }  CountEach = _json["count_each"]; }
        { if(!_json["satckable"].IsBoolean) { throw new SerializationException(); }  Satckable = _json["satckable"]; }
        PostInit();
    }

    public DropByProbability(int pickable_id, float probability, int count_each, bool satckable )  : base() 
    {
        this.PickableId = pickable_id;
        this.Probability = probability;
        this.CountEach = count_each;
        this.Satckable = satckable;
        PostInit();
    }

    public static DropByProbability DeserializeDropByProbability(JSONNode _json)
    {
        return new drops.DropByProbability(_json);
    }

    public int PickableId { get; private set; }
    /// <summary>
    /// 0-1
    /// </summary>
    public float Probability { get; private set; }
    /// <summary>
    /// 每次掉落时, 掉落几个
    /// </summary>
    public int CountEach { get; private set; }
    /// <summary>
    /// 是叠加掉落还是分开掉落
    /// </summary>
    public bool Satckable { get; private set; }

    public const int __ID__ = 1145627781;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "PickableId:" + PickableId + ","
        + "Probability:" + Probability + ","
        + "CountEach:" + CountEach + ","
        + "Satckable:" + Satckable + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
