//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace Hsenl.numeric
{ 

/// <summary>
/// 基础值, 比如人物的初始血量, 攻击力
/// </summary>
public sealed partial class BasicValueInfo :  numeric.Info 
{
    public BasicValueInfo(JSONNode _json)  : base(_json) 
    {
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  Type = (NumericType)_json["type"].AsInt; }
        { if(!_json["value"].IsNumber) { throw new SerializationException(); }  Value = _json["value"]; }
        { if(!_json["sign"].IsString) { throw new SerializationException(); }  Sign = _json["sign"]; }
        PostInit();
    }

    public BasicValueInfo(NumericType type, double value, string sign )  : base() 
    {
        this.Type = type;
        this.Value = value;
        this.Sign = sign;
        PostInit();
    }

    public static BasicValueInfo DeserializeBasicValueInfo(JSONNode _json)
    {
        return new numeric.BasicValueInfo(_json);
    }

    /// <summary>
    /// 数值类型
    /// </summary>
    public NumericType Type { get; private set; }
    /// <summary>
    /// 值
    /// </summary>
    public double Value { get; private set; }
    /// <summary>
    /// 值类型标记(i-int;l-long;f-float)
    /// </summary>
    public string Sign { get; private set; }

    public const int __ID__ = 915805778;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "Type:" + Type + ","
        + "Value:" + Value + ","
        + "Sign:" + Sign + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
