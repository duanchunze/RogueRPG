//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace Hsenl.behavior
{ 

/// <summary>
/// 行为信息基类
/// </summary>
public abstract partial class Info :  Bright.Config.BeanBase 
{
    public Info(JSONNode _json) 
    {
        PostInit();
    }

    public Info() 
    {
        PostInit();
    }

    public static Info DeserializeInfo(JSONNode _json)
    {
        string type = _json["$type"];
        switch (type)
        {
            case "SelectorNodeInfo": return new behavior.SelectorNodeInfo(_json);
            case "SequentialNodeInfo": return new behavior.SequentialNodeInfo(_json);
            case "ParalleNodeInfo": return new behavior.ParalleNodeInfo(_json);
            case "ParalleSelectorNodeInfo": return new behavior.ParalleSelectorNodeInfo(_json);
            case "ParalleSequentialNodeInfo": return new behavior.ParalleSequentialNodeInfo(_json);
            case "AINodeInfo": return new behavior.AINodeInfo(_json);
            case "AbortNodeInfo": return new behavior.AbortNodeInfo(_json);
            case "ai.PlayerPickClosestTargetInfo": return new ai.PlayerPickClosestTargetInfo(_json);
            case "ai.PlayerAutoCasterInfo": return new ai.PlayerAutoCasterInfo(_json);
            case "ai.PatrolInfo": return new ai.PatrolInfo(_json);
            case "ai.IntelligentAssaultInfo": return new ai.IntelligentAssaultInfo(_json);
            case "ai.MinionDefaultIntelligentAssaultInfo": return new ai.MinionDefaultIntelligentAssaultInfo(_json);
            case "ai.MinionWuyiIntelligentAssaultInfo": return new ai.MinionWuyiIntelligentAssaultInfo(_json);
            case "ai.FollowMaster": return new ai.FollowMaster(_json);
            case "ai.LoiterFollowMaster": return new ai.LoiterFollowMaster(_json);
            case "casterevaluate.CooldownCheckInfo": return new casterevaluate.CooldownCheckInfo(_json);
            case "casterevaluate.ManaCheckInfo": return new casterevaluate.ManaCheckInfo(_json);
            case "casterevaluate.PrioritiesEvaluateInfo": return new casterevaluate.PrioritiesEvaluateInfo(_json);
            case "casterevaluate.TargetEvaluateInfo": return new casterevaluate.TargetEvaluateInfo(_json);
            case "casterevaluate.PickTargetInfo": return new casterevaluate.PickTargetInfo(_json);
            case "casterevaluate.PickBackTarget": return new casterevaluate.PickBackTarget(_json);
            case "casterevaluate.ApproachTargetInfo": return new casterevaluate.ApproachTargetInfo(_json);
            case "casterevaluate.HealthLowerInfo": return new casterevaluate.HealthLowerInfo(_json);
            case "casterevaluate.CasterSummoningInfo": return new casterevaluate.CasterSummoningInfo(_json);
            case "adventurescheme.DefaultCheckpointsAdventureInfo": return new adventurescheme.DefaultCheckpointsAdventureInfo(_json);
            case "adventurescheme.DefaultBigMapAdventureInfo": return new adventurescheme.DefaultBigMapAdventureInfo(_json);
            case "timeline.SetDataInfo": return new timeline.SetDataInfo(_json);
            case "timeline.PlayAnimInfo": return new timeline.PlayAnimInfo(_json);
            case "timeline.LockAnimaInfo": return new timeline.LockAnimaInfo(_json);
            case "timeline.UnlockAnimaInfo": return new timeline.UnlockAnimaInfo(_json);
            case "timeline.CureHpInfo": return new timeline.CureHpInfo(_json);
            case "timeline.ModifyPriorityInfo": return new timeline.ModifyPriorityInfo(_json);
            case "timeline.PlaySoundInfo": return new timeline.PlaySoundInfo(_json);
            case "timeline.InflictionStatusToTargetInfo": return new timeline.InflictionStatusToTargetInfo(_json);
            case "timeline.RemoveStatusFromTargetInfo": return new timeline.RemoveStatusFromTargetInfo(_json);
            case "timeline.InflictionStatusToSelfInfo": return new timeline.InflictionStatusToSelfInfo(_json);
            case "timeline.RemoveStatusFromSelfInfo": return new timeline.RemoveStatusFromSelfInfo(_json);
            case "timeline.PlayFxInfo": return new timeline.PlayFxInfo(_json);
            case "timeline.RecordCastDirectionInfo": return new timeline.RecordCastDirectionInfo(_json);
            case "timeline.OpenWarningBoardInfo": return new timeline.OpenWarningBoardInfo(_json);
            case "timeline.OpenWarningBoard2Info": return new timeline.OpenWarningBoard2Info(_json);
            case "timeline.OpenWarningBoard3Info": return new timeline.OpenWarningBoard3Info(_json);
            case "timeline.CloseWarningBoardInfo": return new timeline.CloseWarningBoardInfo(_json);
            case "timeline.DieInfo": return new timeline.DieInfo(_json);
            case "timeline.ResurgenceInfo": return new timeline.ResurgenceInfo(_json);
            case "timeline.HarmOfTargetedInfo": return new timeline.HarmOfTargetedInfo(_json);
            case "timeline.HarmOfTargetedBoltInfo": return new timeline.HarmOfTargetedBoltInfo(_json);
            case "timeline.HarmOfDirectionBoltInfo": return new timeline.HarmOfDirectionBoltInfo(_json);
            case "timeline.HarmOfPointBoltInfo": return new timeline.HarmOfPointBoltInfo(_json);
            case "timeline.HarmOfLiuxingluoBoltInfo": return new timeline.HarmOfLiuxingluoBoltInfo(_json);
            case "timeline.HarmOfDibozhanBoltInfo": return new timeline.HarmOfDibozhanBoltInfo(_json);
            case "timeline.SummoningMinionInfo": return new timeline.SummoningMinionInfo(_json);
            case "timeline.ContinuesPlayAnimInfo": return new timeline.ContinuesPlayAnimInfo(_json);
            case "timeline.MoveInfo": return new timeline.MoveInfo(_json);
            case "timeline.ModifyTagsInfo": return new timeline.ModifyTagsInfo(_json);
            case "timeline.ForceMovementInfo": return new timeline.ForceMovementInfo(_json);
            case "timeline.LeapInfo": return new timeline.LeapInfo(_json);
            case "timeline.JumpAttackInfo": return new timeline.JumpAttackInfo(_json);
            case "timeline.HarmOfColliderInfo": return new timeline.HarmOfColliderInfo(_json);
            case "timeline.ContinuousHarmOfColliderInfo": return new timeline.ContinuousHarmOfColliderInfo(_json);
            case "timeline.TsStatusContinuousHarmInfo": return new timeline.TsStatusContinuousHarmInfo(_json);
            case "timeline.LiuXueInfo": return new timeline.LiuXueInfo(_json);
            case "timeline.RanshaoInfo": return new timeline.RanshaoInfo(_json);
            case "timeline.WenyiInfo": return new timeline.WenyiInfo(_json);
            case "timeline.WenyichuanboInfo": return new timeline.WenyichuanboInfo(_json);
            case "timeline.DeadBodyVampirOfColliderInfo": return new timeline.DeadBodyVampirOfColliderInfo(_json);
            case "timeline.DeadAbortCheckInfo": return new timeline.DeadAbortCheckInfo(_json);
            case "timestageline.ActionInfo": return new timestageline.ActionInfo(_json);
            case "timestageline.ConditionOrInfo": return new timestageline.ConditionOrInfo(_json);
            case "timestageline.ConditionAndInfo": return new timestageline.ConditionAndInfo(_json);
            default: throw new SerializationException();
        }
    }



    public virtual void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public virtual void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
