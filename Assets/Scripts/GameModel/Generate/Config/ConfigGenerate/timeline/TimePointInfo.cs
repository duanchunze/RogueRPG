//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace Hsenl.timeline
{ 

public abstract partial class TimePointInfo :  timeline.TimeActionInfo 
{
    public TimePointInfo(JSONNode _json)  : base(_json) 
    {
        { if(!_json["model"].IsNumber) { throw new SerializationException(); }  Model = _json["model"]; }
        { if(!_json["point"].IsNumber) { throw new SerializationException(); }  Point = _json["point"]; }
        PostInit();
    }

    public TimePointInfo(int model, float point )  : base() 
    {
        this.Model = model;
        this.Point = point;
        PostInit();
    }

    public static TimePointInfo DeserializeTimePointInfo(JSONNode _json)
    {
        string type = _json["$type"];
        switch (type)
        {
            case "SetDataInfo": return new timeline.SetDataInfo(_json);
            case "PlayAnimInfo": return new timeline.PlayAnimInfo(_json);
            case "CureHpInfo": return new timeline.CureHpInfo(_json);
            case "ModifyPriorityInfo": return new timeline.ModifyPriorityInfo(_json);
            case "PlaySoundInfo": return new timeline.PlaySoundInfo(_json);
            case "InflictionStatusToTargetInfo": return new timeline.InflictionStatusToTargetInfo(_json);
            case "RemoveStatusFromTargetInfo": return new timeline.RemoveStatusFromTargetInfo(_json);
            case "InflictionStatusToSelfInfo": return new timeline.InflictionStatusToSelfInfo(_json);
            case "RemoveStatusFromSelfInfo": return new timeline.RemoveStatusFromSelfInfo(_json);
            case "PlayFxInfo": return new timeline.PlayFxInfo(_json);
            case "RecordCastDirectionInfo": return new timeline.RecordCastDirectionInfo(_json);
            case "OpenWarningBoardInfo": return new timeline.OpenWarningBoardInfo(_json);
            case "CloseWarningBoardInfo": return new timeline.CloseWarningBoardInfo(_json);
            case "DieInfo": return new timeline.DieInfo(_json);
            case "ResurgenceInfo": return new timeline.ResurgenceInfo(_json);
            case "HarmOfTargetedInfo": return new timeline.HarmOfTargetedInfo(_json);
            case "HarmOfTargetedBoltInfo": return new timeline.HarmOfTargetedBoltInfo(_json);
            case "HarmOfDirectionBoltInfo": return new timeline.HarmOfDirectionBoltInfo(_json);
            case "HarmOfPointBoltInfo": return new timeline.HarmOfPointBoltInfo(_json);
            case "HarmOfDibozhanBoltInfo": return new timeline.HarmOfDibozhanBoltInfo(_json);
            case "SummoningMinionInfo": return new timeline.SummoningMinionInfo(_json);
            default: throw new SerializationException();
        }
    }

    /// <summary>
    /// 时间点模式, 0代表实际值, 1代表百分比
    /// </summary>
    public int Model { get; private set; }
    public float Point { get; private set; }


    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "Model:" + Model + ","
        + "Point:" + Point + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
