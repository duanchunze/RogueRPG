//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace Hsenl.timeline
{ 

/// <summary>
/// 时间线信息基类
/// </summary>
public abstract partial class TimeLineInfo :  behavior.Info 
{
    public TimeLineInfo(JSONNode _json)  : base(_json) 
    {
        PostInit();
    }

    public TimeLineInfo()  : base() 
    {
        PostInit();
    }

    public static TimeLineInfo DeserializeTimeLineInfo(JSONNode _json)
    {
        string type = _json["$type"];
        switch (type)
        {
            case "SetDataInfo": return new timeline.SetDataInfo(_json);
            case "PlayAnimInfo": return new timeline.PlayAnimInfo(_json);
            case "CureHpInfo": return new timeline.CureHpInfo(_json);
            case "ModifyPriorityInfo": return new timeline.ModifyPriorityInfo(_json);
            case "PlaySoundInfo": return new timeline.PlaySoundInfo(_json);
            case "InflictionStatusToTargetInfo": return new timeline.InflictionStatusToTargetInfo(_json);
            case "RemoveStatusFromTargetInfo": return new timeline.RemoveStatusFromTargetInfo(_json);
            case "InflictionStatusToSelfInfo": return new timeline.InflictionStatusToSelfInfo(_json);
            case "RemoveStatusFromSelfInfo": return new timeline.RemoveStatusFromSelfInfo(_json);
            case "PlayFxInfo": return new timeline.PlayFxInfo(_json);
            case "RecordCastDirectionInfo": return new timeline.RecordCastDirectionInfo(_json);
            case "OpenWarningBoardInfo": return new timeline.OpenWarningBoardInfo(_json);
            case "CloseWarningBoardInfo": return new timeline.CloseWarningBoardInfo(_json);
            case "DieInfo": return new timeline.DieInfo(_json);
            case "ResurgenceInfo": return new timeline.ResurgenceInfo(_json);
            case "HarmOfTargetedInfo": return new timeline.HarmOfTargetedInfo(_json);
            case "HarmOfTargetedBoltInfo": return new timeline.HarmOfTargetedBoltInfo(_json);
            case "HarmOfDirectionBoltInfo": return new timeline.HarmOfDirectionBoltInfo(_json);
            case "HarmOfPointBoltInfo": return new timeline.HarmOfPointBoltInfo(_json);
            case "HarmOfDibozhanBoltInfo": return new timeline.HarmOfDibozhanBoltInfo(_json);
            case "SummoningMinionInfo": return new timeline.SummoningMinionInfo(_json);
            case "MoveInfo": return new timeline.MoveInfo(_json);
            case "ModifyTagsInfo": return new timeline.ModifyTagsInfo(_json);
            case "ForceMovementInfo": return new timeline.ForceMovementInfo(_json);
            case "LeapInfo": return new timeline.LeapInfo(_json);
            case "JumpAttackInfo": return new timeline.JumpAttackInfo(_json);
            case "HarmOfColliderInfo": return new timeline.HarmOfColliderInfo(_json);
            case "HarmOfSphereColliderInfo": return new timeline.HarmOfSphereColliderInfo(_json);
            case "HarmOfBoxColliderInfo": return new timeline.HarmOfBoxColliderInfo(_json);
            case "TsStatusContinuousHarmInfo": return new timeline.TsStatusContinuousHarmInfo(_json);
            case "LiuXueInfo": return new timeline.LiuXueInfo(_json);
            case "RanshaoInfo": return new timeline.RanshaoInfo(_json);
            case "WenyiInfo": return new timeline.WenyiInfo(_json);
            case "WenyichuanboInfo": return new timeline.WenyichuanboInfo(_json);
            case "DeadBodyVampirOfSphereColliderInfo": return new timeline.DeadBodyVampirOfSphereColliderInfo(_json);
            case "DeadAbortCheckInfo": return new timeline.DeadAbortCheckInfo(_json);
            default: throw new SerializationException();
        }
    }



    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
