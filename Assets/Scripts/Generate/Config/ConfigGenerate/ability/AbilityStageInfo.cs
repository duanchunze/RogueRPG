//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace Hsenl.ability
{ 

public sealed partial class AbilityStageInfo :  ability.Info 
{
    public AbilityStageInfo(JSONNode _json)  : base(_json) 
    {
        { if(!_json["stageType"].IsNumber) { throw new SerializationException(); }  StageType = (StageType)_json["stageType"].AsInt; }
        { if(!_json["duration"].IsNumber) { throw new SerializationException(); }  Duration = _json["duration"]; }
        { var __json0 = _json["actions"]; if(!__json0.IsArray) { throw new SerializationException(); } Actions = new System.Collections.Generic.List<timeline.TimeActionInfo>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { timeline.TimeActionInfo __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = timeline.TimeActionInfo.DeserializeTimeActionInfo(__e0);  }  Actions.Add(__v0); }   }
        PostInit();
    }

    public AbilityStageInfo(StageType stageType, float duration, System.Collections.Generic.List<timeline.TimeActionInfo> actions )  : base() 
    {
        this.StageType = stageType;
        this.Duration = duration;
        this.Actions = actions;
        PostInit();
    }

    public static AbilityStageInfo DeserializeAbilityStageInfo(JSONNode _json)
    {
        return new ability.AbilityStageInfo(_json);
    }

    public StageType StageType { get; private set; }
    public float Duration { get; private set; }
    /// <summary>
    /// 所有动作都运行在并行复合节点下
    /// </summary>
    public System.Collections.Generic.List<timeline.TimeActionInfo> Actions { get; private set; }

    public const int __ID__ = -446123226;
    public override int GetTypeId() => __ID__;

    public override void Resolve(Dictionary<string, object> _tables)
    {
        base.Resolve(_tables);
        foreach(var _e in Actions) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public override void TranslateText(System.Func<string, string, string> translator)
    {
        base.TranslateText(translator);
        foreach(var _e in Actions) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "StageType:" + StageType + ","
        + "Duration:" + Duration + ","
        + "Actions:" + Bright.Common.StringUtil.CollectionToString(Actions) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
