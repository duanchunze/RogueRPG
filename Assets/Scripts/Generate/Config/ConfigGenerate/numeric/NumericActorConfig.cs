//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace Hsenl.numeric
{ 

public sealed partial class NumericActorConfig :  Bright.Config.BeanBase 
{
    public NumericActorConfig(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["alias"].IsString) { throw new SerializationException(); }  Alias = _json["alias"]; }
        { var __json0 = _json["numeric_infos"]; if(!__json0.IsArray) { throw new SerializationException(); } NumericInfos = new System.Collections.Generic.List<numeric.BasicValueInfo>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { numeric.BasicValueInfo __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = numeric.BasicValueInfo.DeserializeBasicValueInfo(__e0);  }  NumericInfos.Add(__v0); }   }
        PostInit();
    }

    public NumericActorConfig(int id, string alias, System.Collections.Generic.List<numeric.BasicValueInfo> numeric_infos ) 
    {
        this.Id = id;
        this.Alias = alias;
        this.NumericInfos = numeric_infos;
        PostInit();
    }

    public static NumericActorConfig DeserializeNumericActorConfig(JSONNode _json)
    {
        return new numeric.NumericActorConfig(_json);
    }

    /// <summary>
    /// 这是ID
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 别名
    /// </summary>
    public string Alias { get; private set; }
    public System.Collections.Generic.List<numeric.BasicValueInfo> NumericInfos { get; private set; }

    public const int __ID__ = -1939122965;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in NumericInfos) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in NumericInfos) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Alias:" + Alias + ","
        + "NumericInfos:" + Bright.Common.StringUtil.CollectionToString(NumericInfos) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
